// @generated by protoc-gen-es v1.6.0
// @generated from file client/agent/v1/agent.proto (package client.agent.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message client.agent.v1.HeartbeatRequest
 */
export declare class HeartbeatRequest extends Message<HeartbeatRequest> {
  constructor(data?: PartialMessage<HeartbeatRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "client.agent.v1.HeartbeatRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeartbeatRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeartbeatRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeartbeatRequest;

  static equals(a: HeartbeatRequest | PlainMessage<HeartbeatRequest> | undefined, b: HeartbeatRequest | PlainMessage<HeartbeatRequest> | undefined): boolean;
}

/**
 * @generated from message client.agent.v1.HeartbeatResponse
 */
export declare class HeartbeatResponse extends Message<HeartbeatResponse> {
  /**
   * @generated from field: client.agent.v1.MetaInfo meta = 1;
   */
  meta?: MetaInfo;

  constructor(data?: PartialMessage<HeartbeatResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "client.agent.v1.HeartbeatResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HeartbeatResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HeartbeatResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HeartbeatResponse;

  static equals(a: HeartbeatResponse | PlainMessage<HeartbeatResponse> | undefined, b: HeartbeatResponse | PlainMessage<HeartbeatResponse> | undefined): boolean;
}

/**
 * Request message for registering an agent.
 *
 * @generated from message client.agent.v1.AskAgentRequest
 */
export declare class AskAgentRequest extends Message<AskAgentRequest> {
  /**
   * @generated from field: string question = 1;
   */
  question: string;

  /**
   * @generated from field: string error = 3;
   */
  error: string;

  /**
   * @generated from field: string query = 4;
   */
  query: string;

  constructor(data?: PartialMessage<AskAgentRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "client.agent.v1.AskAgentRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AskAgentRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AskAgentRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AskAgentRequest;

  static equals(a: AskAgentRequest | PlainMessage<AskAgentRequest> | undefined, b: AskAgentRequest | PlainMessage<AskAgentRequest> | undefined): boolean;
}

/**
 * Response message for registering an agent.
 *
 * @generated from message client.agent.v1.AskAgentResponse
 */
export declare class AskAgentResponse extends Message<AskAgentResponse> {
  /**
   * The ID of the registered agent.
   *
   * @generated from field: string sql = 1;
   */
  sql: string;

  /**
   * Optional error message for error handling
   *
   * @generated from field: string error = 2;
   */
  error: string;

  /**
   * Optional error message for error handling
   *
   * @generated from field: client.agent.v1.MetaInfo meta = 3;
   */
  meta?: MetaInfo;

  /**
   * Optional error message for error handling
   *
   * @generated from field: string data = 4;
   */
  data: string;

  constructor(data?: PartialMessage<AskAgentResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "client.agent.v1.AskAgentResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AskAgentResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AskAgentResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AskAgentResponse;

  static equals(a: AskAgentResponse | PlainMessage<AskAgentResponse> | undefined, b: AskAgentResponse | PlainMessage<AskAgentResponse> | undefined): boolean;
}

/**
 * @generated from message client.agent.v1.MetaInfo
 */
export declare class MetaInfo extends Message<MetaInfo> {
  /**
   * The ID of the registered agent.
   *
   * @generated from field: string database = 1;
   */
  database: string;

  /**
   * Optional error message for error handling
   *
   * @generated from field: string username = 2;
   */
  username: string;

  /**
   * Optional error message for error handling
   *
   * @generated from field: string host = 3;
   */
  host: string;

  /**
   * @generated from field: string type = 4;
   */
  type: string;

  /**
   * @generated from field: string schema = 5;
   */
  schema: string;

  /**
   * @generated from field: repeated string tables = 6;
   */
  tables: string[];

  /**
   * @generated from field: string id = 7;
   */
  id: string;

  constructor(data?: PartialMessage<MetaInfo>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "client.agent.v1.MetaInfo";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetaInfo;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetaInfo;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetaInfo;

  static equals(a: MetaInfo | PlainMessage<MetaInfo> | undefined, b: MetaInfo | PlainMessage<MetaInfo> | undefined): boolean;
}

